seed='6';
dataset='Epinions';
edges = load(strcat('Data\', dataset, '\seed=', seed, '\train_edges.txt'));
order = 20;

sources = edges(:, 1) + 1;  % Our edge list is generated by Py script, such that index starts from 0. But in Matlab, index starts from 1.
targets = edges(:, 2) + 1;
weights = edges(:, 3);
G = graph();
G = addedge(G, sources, targets, weights);
G = simplify(G);
numNodes = G.numnodes;
A = full(adjacency(G,'weighted'));
I = speye(numNodes);
vecD = abs(A) * ones(numNodes, 1);
D = speye(numNodes);
for i = 1: numNodes
    D(i, i) = vecD(i);
end

invD = sparse(numNodes, numNodes);
for i = 1: numNodes
    if D(i, i) == 0
        continue
    end
    invD(i, i) = 1 / D(i, i);
end
P = invD * A;

P1 = P;
P1(P1<0) = 0;
P2 = P;
P2(P1>0) = 0;
P2 = -P2;
positive_SAFT = zeros(numNodes, numNodes);
negative_SAFT = zeros(numNodes, numNodes);

tic
parfor i = 1: numNodes
    disp(i);
    X1 = P1(:, i);
    X2 = P2(:, i);
    Q1 = P1;
    Q1(:, i) = 0;
    Q1(i, :) = 0;
    Q2 = P2;
    Q2(:, i) = 0;
    Q2(i, :) = 0;
    R1 = Q1 + Q2;
    R2 = Q1 - Q2;
    tmp1 = X1;
    tmp2 = X1;
    tmp3 = X2;
    tmp4 = X2;
    psaft = (tmp1 + tmp2 + tmp3 - tmp4);
    nsaft = (tmp3 + tmp4 + tmp1 - tmp2);
    d1 = (tmp1 + tmp2 + tmp3 - tmp4);
    d2 = (tmp3 + tmp4 + tmp1 - tmp2);

    for n = 2: order
      tmp1 = R1 * tmp1;
      tmp2 = R2 * tmp2;
      tmp3 = R1 * tmp3;
      tmp4 = R2 * tmp4;
      tmp5 = tmp1 + tmp2 + tmp3 - tmp4;
      tmp6 = tmp3 + tmp4 + tmp1 - tmp2;
      psaft = psaft + n * tmp5;
      nsaft = nsaft + n * tmp6;
      d1 = d1 + tmp5;
      d2 = d2 + tmp6;
    end
    psaft = psaft ./ d1;
    nsaft = nsaft ./ d2;
    positive_SAFT(:, i) = psaft;
    negative_SAFT(:, i) = nsaft;
end
toc
